1，新建项目 cloud-gateway-9527
2，修改依赖，注意：Gateway 不需要 spring-boot-starter-web，否则会报错
   <!--gateway的依赖 -->
   <dependency>
       <groupId>org.springframework.cloud</groupId>
       <artifactId>spring-cloud-starter-gateway</artifactId>
   </dependency>
   <!--gateway无需web和actuator，网关也需要注册到注册中心，所以需要eureka的客户端-->
   <dependency>
       <groupId>org.springframework.cloud</groupId>
       <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
   </dependency>
   <!--监控-->
   <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-actuator</artifactId>
   </dependency>

3，配置配置文件 application.yml
server:
  port: 9527
spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # 开启从注册中心动态创建路由的功能，利用微服务名称进行路由
      routes:  # 这里就是配置路由的，可以配置多个路由
        - id: payment_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配该路由后要转发的目标微服务器的协议://微服务Ip:微服务端口，还可以是eureka的服务名
          #uri: http://localhost:8001
          uri: lb://CLOUD-PAYMENT-SERVICE
          predicates:   #这个是配置断言的，可以胚子和多个断言
            - Path=/payment/get/** # Path表示“路径断言”，及请求路径和Path指定的路径相匹配的才满足断言，才会进行路由

          #解释，当请求路径满足 predicates的断言后，请求的协议、主机、端口将会改变为 uri指定的协议://主机:端口
          #uri有两种写法，可以直接写 协议://ip:端口，也可以写 lb://微服务在eureka中的服务名，其中lb表示

        - id: payment_route2
          #uri: http://localhost:8001
          uri: lb://CLOUD-PAYMENT-SERVICE
          predicates:
            - Path=/payment/lb/** #断言,路径相匹配的进行路由
            - After=2020-03-09T22:40:37.365+08:00[Asia/Shanghai]

eureka:
  instance:
    hostname: cloud-gateway-service
  client:
    #表示向注册中心注册自己 默认为true
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡
    fetch-registry: true
    service-url:
      # 入驻地址
      # defaultZone: http://localhost:7001/eureka/
      #集群版
      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/

4，新建主启动类
@SpringBootApplication
@EnableEurekaClient
public class GatewayMain9527 {
    public static void main(String[] args) {
        SpringApplication.run(GatewayMain9527.class, args);
    }
}

5，