1，Gateway中的过滤，指的是Spring框架中的 GatewayFilter的实例，使用过滤器，可以在请求被路由前后对请求进行修改。
2，Spring Cloud Gateway 内置了多种“路由过滤器”，他们都由GatewayFilter的工厂类来产生。
   2.1 Gateway 过滤器的生命周期
       - pre
       - post
   2.2 Gateway 过滤器的种类
       - GatewayFilter  单一的
         内置了30多个过滤器，如：
         AddRequestParameter

       - GlobalFilter   全局的
         内置了10多个过滤器

       - 自定义过滤器

3，如何配置过滤器
    routes:  # 这里就是配置路由的，可以配置多个路由
        - id: payment_route2
          #uri: http://localhost:8001
          uri: lb://CLOUD-PAYMENT-SERVICE
          predicates:
            - Path=/payment/lb/** #断言,路径相匹配的进行路由
            - After=2020-03-09T22:40:37.365+08:00[Asia/Shanghai]
          filters:
            - AddRequestParameter=X-Request-Id,1024  # 过滤器工厂会在匹配的请求头加上 X-Request-Id ,值为 1024


4，自定义过滤器
   4.1 自定义全局过滤器，需要实现两个接口  implements GlobalFilter,Ordered
   全局过滤器，对于任意的请求都有效。
   @Component
   @Slf4j
   public class MyLogGatewayFilter implements GlobalFilter, Ordered {
       @Override
       public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
           log.info("**** my log message ****");
           String uname = exchange.getRequest().getQueryParams().getFirst("uname");
           if (uname == null) {
               log.info("**** 用户名为null，非法用户 ****");
               exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);

               //表示响应给调用方了
               return exchange.getResponse().setComplete();
           }
           //继续下一个过滤器
           return chain.filter(exchange);
       }

       @Override
       public int getOrder() {
           // 数字越小，优先级越高
           return 0;
       }
   }